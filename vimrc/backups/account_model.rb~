class Account

  include Mongoid::Document
  include Mongoid::Timestamps::Short

  attr_accessor :code, :send_password_email

  TYPES = %w( teacher developer student )

  field :first_name, type: String
  field :last_name,  type: String
  field :fullname,   type: String
  field :username,   type: String
  field :about,      type: String
  field :avatar,     type: String, default: ''
  field :link_code,  type: String
  field :password,   type: String
  field :password_hash
  field :password_salt
  field :email,   type: String
  field :type,    type: String, default: 'student'
  field :status,  type: String, default: 'inactive'
  field :phone
  field :city,    type: String
  field :country, type: String

  # TODO
  field :activation_token, type: String, default: ''

  before_create :encrypt_password
  before_save :create_fullname
  before_create :generate_link_code
  before_create :activation_token_code
  after_create :do_assignments

  validates :password, presence: true, on: :create
  validates :username, presence: true
  validates :username, uniqueness: true

  #
  # Custom validation by Account Type
  #
  with_options if: :is_teacher? do |a|
    a.validates :email, presence: true
    a.validates :username, presence: true
    a.validates :password, presence: true
  end

  with_options if: :is_student? do |a|
    a.validates :first_name, presence: true
    a.validates :last_name,  presence: true
  end

  with_options if: :is_developer? do |a|
    a.validates :email, presence: true
  end


  # Relations

  has_one :school, class_name: 'School', inverse_of: :owner
  belongs_to :in_school, class_name: 'School', inverse_of: :accounts
  has_many  :groups,  class_name: 'Group', inverse_of: :teacher
  has_and_belongs_to_many :in_groups,  class_name: 'Group', inverse_of: :students
  has_one :company, class_name: 'Company', inverse_of: :owner
  has_many :properties, class_name: 'Property'
  # OAuth
  has_many :tokens, class_name: 'OauthToken'
  has_many :clients, class_name: 'Client'
  has_many :authorizations, class_name: 'OauthAuthorization'

  #
  # Scopes
  #

  TYPES.each do |acc_type|
    # scopes for each account type
    scope acc_type.pluralize.to_sym, where(:type => acc_type)

    #define is_teacher?, is_developer?...
    define_method "is_#{acc_type}?" do
      self.type == acc_type
    end
  end

  def launch_application(application)
    application.run_hooks(:sign_in, self)
  end

  def add_application(application)
    application.run_hooks(:sign_up, self)
  end

  #
  # Before Save/Create hooks
  #
  def encrypt_password
    if password.present?
      self.password_salt = BCrypt::Engine.generate_salt
      self.password_hash = BCrypt::Engine.hash_secret(password, password_salt)
    end
  end

  #
  # Generate Random Link used for activation mail
  #
  def activation_token_code
    self.activation_token = SecureRandom.hex(15)
  end

  #
  # Generate Link code used to link other accounts to each other
  #

  def generate_link_code
    self.link_code = SecureRandom.hex(6)
  end

  #
  # Create fullname from First and Last name.
  #
  def create_fullname
    self.fullname = "#{first_name} #{last_name}"
  end

  #
  # Small heleprs
  #

  def is_active?
    status == 'active'
  end

  def is_inactive?
    status == 'inactive'
  end

  #
  # Activate account and remove activation_token no longer needed
  #
  def activate(params)
    params.delete(:in_group_ids)
    if school = School.find_by_id(params.delete(:shcool_id))
      self.school = school
      params.delete(:school)
    else
      school = self.build_school(params.delete(:school))
      params.delete(:school_id)
    end
    if school.save
      self.groups << school.default_group
      self.groups.create(:school_id => school.id)
      self.attributes = params                          
      self.status           = 'active'
      self.activation_token = nil
    end
    self.save
  end

  #
  # Methods
  #

  def do_assignments
    if code and !code.empty?
      if is_teacher?
        update_attributes(:school_id => School.find(code).id)
      elsif is_student?
        update_attributes(:status => 'active')
        group = Group.find(code)
        group.students << self
        group.teacher.school.default_group.students << self
      end
    end
  end

  def manage_relations
    if self.reload.is_teacher?
      groups.create(:label => 'My Students', :school_id => school.id)
      groups << school.default_group
    end
  end

  #
  # Authenticate that Username + Password are matching the Account
  #

  def authenticate
    self.class.authenticate(self.username, self.password)
  end

  def self.authenticate(username, password)
    user = where(username: username).first
    user.verify(password) if user
  end


  #
  # verify that Account password match the givem password
  #

  def verify(password)
    if password_hash == BCrypt::Engine.hash_secret(password, password_salt)
      self.reload
    else
      nil
    end
  end

  #
  # Find by
  #

  def self.find_by_token(token)
    token = OauthToken.find_by_token(token)
    if token
      return token.account
    end
  end

  def self.find_by_activation_token(token)
    where(:activation_token => token, :status => 'inactive').first
  end

  def self.find_by_id(id = nil, options = {})
    where(:id => id, :status => 'active').only(options[:fields]).first
  end

  #
  # Locate Account by username/password
  #
  def self.find_account( username = nil, password = nil )
    self.where(username: username, password: password, status: 'active').first
  end

  #
  # Locate single Account by username
  #
  def self.find_by_username(username)
    self.where(username: username, status: 'active').first
  end

  def self.find_by_aid(aid)
    self.where(aid: aid, status: 'active').first
  end


end
