Application.controller 'ManageCtrl',
['$scope', '$filter', '$timeout', '$rootScope', 'Account', 'Group', 'Application'
 ($scope,   $filter,   $timeout,   $rootScope,   Account, Group, Application) ->
  $scope.students = []
  $scope.groups = []
  $scope.group_id

  # Pagging
  $scope.sorting_order = 'first_name'
  $scope.reverse = false
  $scope.filtered_items = []
  $scope.grouped_items = []
  $scope.item_per_page = 10
  $scope.paged_items = []
  $scope.current_page = 0

  $scope.$watch 'students', (new_data) ->
    if new_data?
      $scope.search()

  searchMatch = (haystack, needle) ->
    return false unless needle
    return haystack.toLowerCase().indexOf(needle.toLowerCase()) isnt -1

  $scope.search = () ->
    if _.isString($scope.query) and $scope.query.length > 3
      $scope.filtered_items = $filter("filter")($scope.students, (item) ->
        for attr of item
          return true  if searchMatch(item[attr], $scope.query)
        false
      )
    else
      $scope.filtered_items = $scope.students


    # take care of the sorting order
    $scope.filtered_items = $filter("orderBy")($scope.filtered_items, $scope.sortingOrder, $scope.reverse)  if $scope.sorting_order isnt ""
    $scope.current_page = 0

    # now group by pages
    $scope.group_to_pages()

  $scope.group_to_pages = () ->
    $scope.paged_items = []

    i = 0

    while i < $scope.filtered_items.length
      if i % $scope.item_per_page is 0
        $scope.paged_items[Math.floor(i / $scope.item_per_page)] = [$scope.filtered_items[i]]
      else
        $scope.paged_items[Math.floor(i / $scope.item_per_page)].push $scope.filtered_items[i]
      i++

  $scope.prev = () ->
    if $scope.current_page > 0
      $scope.current_page--

  $scope.next = () ->
    if $scope.current_page < ($scope.paged_items.length - 1)
      $scope.current_page++

  #
  # Everything is ready to start
  #
  $rootScope.$watch 'rails_synced', (sync) ->
    if sync
      $scope.initialize()

  $scope.initialize = () ->
    #
    # Fetch and select the first group
    #
    $scope.account = $rootScope.current_account
    $scope.groups = $scope.account.groups
    $scope.filterByGroup($scope.groups[0].id, $scope.groups[0].label)


  #
  # Watchers
  #

  $scope.$watch 'selectToggle', (new_data, old_data) ->
    $(".student-item input[type='checkbox']").prop('checked', new_data)
    $scope.displayAction()


  #
  # Filter by group
  #
  $scope.filterByGroup = (group_id = null, filter = null) ->
    $('.show_empty').hide()
    $('.show_loading').fadeIn()

    if filter is null
      $scope.btn_group = 'All Students'
      $scope.group = null
    else
      $scope.btn_group = filter
      $scope.group = filter

    if group_id isnt null
      console.log 'Fetching Students for group id', group_id
      $scope.group_id = group_id
      Group.get_students(group_id, (students) ->
        $('.show_loading').fadeOut( () ->
          $('.show_empty').fadeIn() if _.isEmpty(students)
          $scope.students = students
          $scope.$apply() if !$scope.$$phase
        )
      )

  #
  # Display/Hide action btn
  #
  $scope.displayAction = () ->
    if $(".student-item input[type='checkbox']").is(':checked')
      $('#actions').fadeIn()
    else
      $('#actions').fadeOut()

  #
  # Create new Group
  #
  $scope.addNewGroup = () ->
    console.log 'Creating new Group'

  #
  # Removes student from group
  #
  $scope.removeFromGroup = (event, student_id) ->
    event.preventDefault()
    Group.remove_student($scope.group_id, student_id, (student) ->
      angular.forEach($scope.paged_items[$scope.current_page], (value, index) ->
        if value.id == student.id
          $scope.paged_items[$scope.current_page].splice(index, 1)
      )
      $scope.$apply() if !$scope.$$phase
    )

  $scope.activateAccount = (event, id) ->
    console.log 'Activate Student is not implemented'

  #
  # Adds student to group
  #
  $scope.addToGroupForm = (event, student_id) ->
    event.preventDefault()

  #
  # Adds student to group
  #
  $scope.addToGroup = (event, student_id) ->
    event.preventDefault()

  $scope.addApplicationForm = () ->
    Application.all((applications) ->
      $rootScope.applications = applications
      $rootScope.modal_title = 'Avaliable applications list'
      $rootScope.modal_content = 'applications.html'
      $('#modal').modal({})
    )

  $rootScope.addApplication = (application_id) ->
    Group.add_application($scope.group_id, application_id, (response) ->
      console.log response
    )

  $scope.appsList = () ->
    Group.get_applications($scope.group_id, (applications) ->
      $rootScope.applications = applications
      $rootScope.modal_title = 'Applications list'
      $rootScope.modal_content = 'applications-list.html'
      $('#modal').modal()
    )
]
